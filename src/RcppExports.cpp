// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// approx_glpom
NumericVector approx_glpom(NumericMatrix P);
RcppExport SEXP _netrankr_approx_glpom(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(approx_glpom(P));
    return rcpp_result_gen;
END_RCPP
}
// approx_relative
NumericMatrix approx_relative(NumericVector Nu, NumericVector Nd, IntegerMatrix P, bool iterative, int max_iter);
RcppExport SEXP _netrankr_approx_relative(SEXP NuSEXP, SEXP NdSEXP, SEXP PSEXP, SEXP iterativeSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Nu(NuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nd(NdSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< bool >::type iterative(iterativeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(approx_relative(Nu, Nd, P, iterative, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// checkPairs
Rcpp::List checkPairs(NumericVector x, NumericVector y);
RcppExport SEXP _netrankr_checkPairs(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(checkPairs(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dependCurFlow
NumericMatrix dependCurFlow(NumericMatrix Tmat, IntegerMatrix el, int m, int n);
RcppExport SEXP _netrankr_dependCurFlow(SEXP TmatSEXP, SEXP elSEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Tmat(TmatSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(dependCurFlow(Tmat, el, m, n));
    return rcpp_result_gen;
END_RCPP
}
// dependRspn
arma::mat dependRspn(std::vector<std::vector<int> > A, arma::mat Z, arma::mat Zdiv, arma::mat W, int n);
RcppExport SEXP _netrankr_dependRspn(SEXP ASEXP, SEXP ZSEXP, SEXP ZdivSEXP, SEXP WSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zdiv(ZdivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(dependRspn(A, Z, Zdiv, W, n));
    return rcpp_result_gen;
END_RCPP
}
// dependency
NumericMatrix dependency(std::vector<std::vector<int> > adj);
RcppExport SEXP _netrankr_dependency(SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(dependency(adj));
    return rcpp_result_gen;
END_RCPP
}
// LatticeOfIdeals
std::vector<std::vector<int> > LatticeOfIdeals(std::vector<std::vector<int> > child, std::vector<int> parent, std::vector<std::vector<int> > Ek, int nElem, int nIdeals);
RcppExport SEXP _netrankr_LatticeOfIdeals(SEXP childSEXP, SEXP parentSEXP, SEXP EkSEXP, SEXP nElemSEXP, SEXP nIdealsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type child(childSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type Ek(EkSEXP);
    Rcpp::traits::input_parameter< int >::type nElem(nElemSEXP);
    Rcpp::traits::input_parameter< int >::type nIdeals(nIdealsSEXP);
    rcpp_result_gen = Rcpp::wrap(LatticeOfIdeals(child, parent, Ek, nElem, nIdeals));
    return rcpp_result_gen;
END_RCPP
}
// listingIdeals
std::vector<std::vector<int> > listingIdeals(std::vector<std::vector<int> > P, int nElem, int nIdeals);
RcppExport SEXP _netrankr_listingIdeals(SEXP PSEXP, SEXP nElemSEXP, SEXP nIdealsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type nElem(nElemSEXP);
    Rcpp::traits::input_parameter< int >::type nIdeals(nIdealsSEXP);
    rcpp_result_gen = Rcpp::wrap(listingIdeals(P, nElem, nIdeals));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_rank
List mcmc_rank(IntegerMatrix P, IntegerVector init_rank, int rp);
RcppExport SEXP _netrankr_mcmc_rank(SEXP PSEXP, SEXP init_rankSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type init_rank(init_rankSEXP);
    Rcpp::traits::input_parameter< int >::type rp(rpSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_rank(P, init_rank, rp));
    return rcpp_result_gen;
END_RCPP
}
// nialgo
IntegerMatrix nialgo(List adjList, IntegerVector deg);
RcppExport SEXP _netrankr_nialgo(SEXP adjListSEXP, SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type adjList(adjListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type deg(degSEXP);
    rcpp_result_gen = Rcpp::wrap(nialgo(adjList, deg));
    return rcpp_result_gen;
END_RCPP
}
// matdom
arma::imat matdom(NumericMatrix A, bool map, bool benefit);
RcppExport SEXP _netrankr_matdom(SEXP ASEXP, SEXP mapSEXP, SEXP benefitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type map(mapSEXP);
    Rcpp::traits::input_parameter< bool >::type benefit(benefitSEXP);
    rcpp_result_gen = Rcpp::wrap(matdom(A, map, benefit));
    return rcpp_result_gen;
END_RCPP
}
// preserve
int preserve(IntegerMatrix P, NumericVector s, int n);
RcppExport SEXP _netrankr_preserve(SEXP PSEXP, SEXP sSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(preserve(P, s, n));
    return rcpp_result_gen;
END_RCPP
}
// rankprobs
Rcpp::List rankprobs(std::vector<std::vector<int> > ImPred, std::vector<std::vector<int> > ideals, int nElem, int nIdeals);
RcppExport SEXP _netrankr_rankprobs(SEXP ImPredSEXP, SEXP idealsSEXP, SEXP nElemSEXP, SEXP nIdealsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type ImPred(ImPredSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type ideals(idealsSEXP);
    Rcpp::traits::input_parameter< int >::type nElem(nElemSEXP);
    Rcpp::traits::input_parameter< int >::type nIdeals(nIdealsSEXP);
    rcpp_result_gen = Rcpp::wrap(rankprobs(ImPred, ideals, nElem, nIdeals));
    return rcpp_result_gen;
END_RCPP
}
// rankings
IntegerMatrix rankings(std::vector<std::vector<int> > paths, std::vector<std::vector<int> > ideals, int nRank, int nElem);
RcppExport SEXP _netrankr_rankings(SEXP pathsSEXP, SEXP idealsSEXP, SEXP nRankSEXP, SEXP nElemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type paths(pathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type ideals(idealsSEXP);
    Rcpp::traits::input_parameter< int >::type nRank(nRankSEXP);
    Rcpp::traits::input_parameter< int >::type nElem(nElemSEXP);
    rcpp_result_gen = Rcpp::wrap(rankings(paths, ideals, nRank, nElem));
    return rcpp_result_gen;
END_RCPP
}
// resistanceDistance
NumericMatrix resistanceDistance(NumericMatrix C, int n);
RcppExport SEXP _netrankr_resistanceDistance(SEXP CSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(resistanceDistance(C, n));
    return rcpp_result_gen;
END_RCPP
}
// transreduct
NumericMatrix transreduct(NumericMatrix M);
RcppExport SEXP _netrankr_transreduct(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(transreduct(M));
    return rcpp_result_gen;
END_RCPP
}
// treeOfIdeals
Rcpp::List treeOfIdeals(Rcpp::List imPred);
RcppExport SEXP _netrankr_treeOfIdeals(SEXP imPredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type imPred(imPredSEXP);
    rcpp_result_gen = Rcpp::wrap(treeOfIdeals(imPred));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_netrankr_approx_glpom", (DL_FUNC) &_netrankr_approx_glpom, 1},
    {"_netrankr_approx_relative", (DL_FUNC) &_netrankr_approx_relative, 5},
    {"_netrankr_checkPairs", (DL_FUNC) &_netrankr_checkPairs, 2},
    {"_netrankr_dependCurFlow", (DL_FUNC) &_netrankr_dependCurFlow, 4},
    {"_netrankr_dependRspn", (DL_FUNC) &_netrankr_dependRspn, 5},
    {"_netrankr_dependency", (DL_FUNC) &_netrankr_dependency, 1},
    {"_netrankr_LatticeOfIdeals", (DL_FUNC) &_netrankr_LatticeOfIdeals, 5},
    {"_netrankr_listingIdeals", (DL_FUNC) &_netrankr_listingIdeals, 3},
    {"_netrankr_mcmc_rank", (DL_FUNC) &_netrankr_mcmc_rank, 3},
    {"_netrankr_nialgo", (DL_FUNC) &_netrankr_nialgo, 2},
    {"_netrankr_matdom", (DL_FUNC) &_netrankr_matdom, 3},
    {"_netrankr_preserve", (DL_FUNC) &_netrankr_preserve, 3},
    {"_netrankr_rankprobs", (DL_FUNC) &_netrankr_rankprobs, 4},
    {"_netrankr_rankings", (DL_FUNC) &_netrankr_rankings, 4},
    {"_netrankr_resistanceDistance", (DL_FUNC) &_netrankr_resistanceDistance, 2},
    {"_netrankr_transreduct", (DL_FUNC) &_netrankr_transreduct, 1},
    {"_netrankr_treeOfIdeals", (DL_FUNC) &_netrankr_treeOfIdeals, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_netrankr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
